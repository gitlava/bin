#!/usr/bin/ruby

require 'yaml'
require 'openssl'
require 'net/http'
require 'date'
require 'optparse'
require 'ostruct'
require 'base64'

class BBBHelper
  def self.debug?
    @debug ||= false
  end

  def self.debug=(value)
    @debug = value
  end

  def self.debug_http_get_headers(request)
    return unless debug?

    STDERR.puts 'GET Request:'
    STDERR.puts request.path
    request.each_header {|key,value| STDERR.puts "| #{key} = #{value}" }
  end

  def self.debug_http_response_headers(response)
    return unless debug?

    STDERR.puts 'Response:'
    STDERR.puts response.inspect
    response.header.each_header {|key,value| STDERR.puts "| #{key} = #{value}" }
  end

  def self.http_extract_cookies(response)
    all_cookies = response.get_fields('set-cookie')
    unless all_cookies == nil
      cookies_array = Array.new
      all_cookies.each { |cookie|
        cookies_array.push(cookie.split('; ')[0])
      }
      $cookies = cookies_array.join('; ')
    end
  rescue
    raise 'Cookies not extracted for an unknown reason.'
  end

  def self.p_debug(lines)
    if debug?
      lines.split("\n").each do |line|
        STDERR.puts "D,#{line}"
      end
    end
  end

  def self.p_warning(lines)
    if debug?
      lines.split("\n").each do |line|
        STDERR.puts "W,#{line}"
      end
    end
  end

  def self.p_error(lines)
    if debug?
      lines.split("\n").each do |line|
        STDERR.puts "E,#{line}"
      end
    end
  end
end


class BBBrute
  module STAT
    LATENESS  =  0
    ABSENCE   =  1
    TIMES     =  2
    DOORS     =  3
  end

  LOGIN_PAGE = 'misc/login.asp'
  DOORS_PAGE = 'Door/DoorPers.asp'
  USERAGENT  = 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.1'

  def initialize(options)
    @options = options

    uri = URI(@options.server)

    @http = Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == 'https', verify_mode: OpenSSL::SSL::VERIFY_NONE)
  end

  def query(stat, params)
    id = params[:id]
    bdate = params[:bdate]
    edate = params[:edate]
    query = 'Bt=%CF%EE%E8%F1%EA&Period=0'
    query += "&RG=#{stat}"
    query += "&Empl=#{id}" if id
    query += "&bD=#{bdate.day}&bMn=#{bdate.month}&bYr=#{bdate.year}"
    query += "&eD=#{edate.day}&eMn=#{edate.month}&eYr=#{edate.year}"
  end

  def auth
    uri = URI.join(@options.server, LOGIN_PAGE)
    request = Net::HTTP::Get.new(uri.request_uri, {'user-agent' => USERAGENT})
    request.basic_auth(@options.login, @options.password)
    response = @http.request(request)

    BBBHelper::debug_http_get_headers(request)
    BBBHelper::debug_http_response_headers(response)

    raise 'Authorization failed (401)' if response.code == '401'

    $cookies = BBBHelper::http_extract_cookies(response)
  end

  def cwb(date = Date.today)
    date - date.wday + 1
  end

  def cwe(date = Date.today)
    date - date.wday + 7
  end

  def doors
    uri = URI.join(@options.server + '/' + DOORS_PAGE + '?' + query(STAT::TIMES, {:id => @options.id, :bdate => @options.from, :edate => @options.until}))

    request = Net::HTTP::Get.new(uri.request_uri, {'user-agent' => USERAGENT})
    request.basic_auth(@options.login, @options.password)
    request.add_field('cookie', $cookies)
    response = @http.request(request)

    BBBHelper::debug_http_get_headers(request)
    BBBHelper::debug_http_response_headers(response)

    BBBHelper::p_debug "#{@options.id} #{response.inspect}"

    body = response.body.force_encoding('CP1251').encode('UTF-8')

    BBBHelper::p_debug 'BODY'
    BBBHelper::p_debug body
    BBBHelper::p_debug 'END BODY'

    link = body.match(/<a href=\.\.\/misc\/PersInfo\.asp\?ID=[0-9]+>(.*)<\/a>/)

    unless link.nil?
      puts link
    end
  end
end


class BBBOptions
  CONFIG_FILE = File.join(Dir.home, '.bbbrute/config.yml')

  CMD_GLOBAL      = ''
  CMD_HOURS       = 'hours'
  CMD_LOCATE      = 'locate'
  CMD_FIRST       = 'first'
  CMD_LAST        = 'last'
  CMD_SAVE        = 'save'

  MSG_COMMAND_NAME            = '%s (%s)'
  MSG_USAGE                   = 'Usage: %s [OPTION...] COMMAND COMMAND_ARG...'
  MSG_DESCRIPTION             = 'BBBrute exists to help you with the analysis of timesheets'
  MSG_DESCRIPTION_HOURS       = 'Get hours worked by person'
  MSG_DESCRIPTION_LOCATE      = 'Find, where is person now, looking by the last entrie'
  MSG_DESCRIPTION_FIRST       = 'List all first entries of the person by day'
  MSG_DESCRIPTION_LAST        = 'List all last entries of the person by day'
  MSG_DESCRIPTION_SAVE        = 'Save entered global options for future use'
  MSG_OPTION_HELP             = 'Show help message'
  MSG_OPTION_DEBUG            = 'More info for debug purposes'
  MSG_OPTION_SERVER           = 'Select target for BBBrute (example: https://example.org)'
  MSG_OPTION_LOGIN            = 'Domain login of the user with access to the target server'
  MSG_OPTION_PASSWORD         = 'Password of th user with access to the target server'
  MSG_OPTION_MACHINE          = 'Output data as a JSON for further processing'
  MSG_ARGUMENT_ID             = 'ID of the person to check'
  MSG_ARGUMENT_FROM           = 'First day to request info, Default: today'
  MSG_ARGUMENT_TILL           = 'Last day to request info, Default: FROM'

  def initialize
    @options = OpenStruct.new
    @options.debug            = false
    @options.server           = nil
    @options.login            = nil
    @options.password         = nil
    @options.machine_friendly = false
    @options.command          = nil
    @options.command_args     = nil

    load_config
    setup_parsers
  end

  def method_missing(method, *args, &block)
    @options.send(method, *args, &block)
  end

  def exec_help_printout
    @parsers.each do |parser_name, parser_scheme|
      puts parser_scheme
    end

    exit 0
  end

  def setup_parsers
    @parsers = {
      CMD_GLOBAL => OptionParser.new do |o|
        o.banner = MSG_USAGE % File.basename($0)
        o.separator MSG_DESCRIPTION
        o.separator ''
        o.separator 'OPTIONS'

        o.on('-h', '--help', MSG_OPTION_HELP)\
          { exec_help_printout }

        o.on('-d', '--[no-]debug', MSG_OPTION_DEBUG)\
          {|b| @options.debug = b }

        o.on('-s', '--server HOSTNAME', String, MSG_OPTION_SERVER)\
          {|s| @options.server = s }

        o.on('-l', '--login LOGIN', String, MSG_OPTION_LOGIN)\
          {|s| @options.login = s }

        o.on('-p', '--password PASSWORD', String, MSG_OPTION_PASSWORD)\
          {|s| @options.password = s }

        o.on('-m', '--[no-]machine-friendly', MSG_OPTION_MACHINE)\
          {|b| @options.machine_friendly = b }

        o.separator ''
        o.separator 'COMMANDS'
      end,

      CMD_HOURS => OptionParser.new do |o|
        o.banner = MSG_COMMAND_NAME % [CMD_HOURS, MSG_DESCRIPTION_HOURS]

        o.on('-i', '--id ID', Integer, MSG_ARGUMENT_ID)\
          {|i| @options.command_args.id = i }

        o.on('-f', '--from DD.MM.YYYY', String, MSG_ARGUMENT_FROM)\
          {|s| @options.command_args.from = Date.parse(s) }

        o.on('-t', '--till DD.MM.YYYY', String, MSG_ARGUMENT_TILL)\
          {|s| @options.command_args.until = Date.parse(s) }

        o.separator ''
      end,

      CMD_LOCATE => OptionParser.new do |o|
        o.banner = MSG_COMMAND_NAME % [CMD_LOCATE, MSG_DESCRIPTION_LOCATE]

        o.on('-i', '--id ID', Integer, MSG_ARGUMENT_ID)\
          {|i| @options.command_args.id = i }

        o.separator ''
      end,

      CMD_FIRST => OptionParser.new do |o|
        o.banner = MSG_COMMAND_NAME % [CMD_FIRST, MSG_DESCRIPTION_FIRST]

        o.on('-i', '--id ID', Integer, MSG_ARGUMENT_ID)\
          {|i| @options.command_args.id = i }

        o.on('-f', '--from DD.MM.YYYY', String, MSG_ARGUMENT_FROM)\
          {|s| @options.command_args.from = Date.parse(s) }

        o.on('-t', '--till DD.MM.YYYY', String, MSG_ARGUMENT_TILL)\
          {|s| @options.command_args.until = Date.parse(s) }

        o.separator ''
      end,

      CMD_LAST => OptionParser.new do |o|
        o.banner = MSG_COMMAND_NAME % [CMD_LAST, MSG_DESCRIPTION_LAST]

        o.on('-i', '--id ID', Integer, MSG_ARGUMENT_ID)\
          {|i| @options.command_args.id = i }

        o.on('-f', '--from DD.MM.YYYY', String, MSG_ARGUMENT_FROM)\
          {|s| @options.command_args.from = Date.parse(s) }

        o.on('-t', '--till DD.MM.YYYY', String, MSG_ARGUMENT_TILL)\
          {|s| @options.command_args.until = Date.parse(s) }

        o.separator ''
      end,

      CMD_SAVE => OptionParser.new do |o|
        o.banner = MSG_COMMAND_NAME % [CMD_SAVE, MSG_DESCRIPTION_SAVE]
        o.separator ''
      end
    }
  end

  def load_config
    File.open(CONFIG_FILE) do |f|
      config = YAML::load(f)

      @options.server   = config[:server]
      @options.login    = config[:login]
      @options.password = Base64.decode64(config[:password])

      BBBHelper.p_debug 'Configuration loaded from the file: ' + CONFIG_FILE
    end
  rescue
    BBBHelper.p_warning 'Unable to load configuration from the file: ' + CONFIG_FILE
  end

  def save_config
    config = {
      :server => @options.server,
      :login => @options.login,
      :password => Base64.encode64(@options.password)
    }

    Dir.mkdir(File.dirname(CONFIG_FILE)) unless Dir.exist?(File.dirname(CONFIG_FILE))
    File.open(CONFIG_FILE, mode = 'w') do |f|
      f.puts(config.to_yaml)
    end

    puts 'Configuration written to the file: ' + CONFIG_FILE
  rescue => e
    BBBHelper.p_error "Unable to write configuration to the file(#{CONFIG_FILE})"
    raise e
  end

  def parse(argv = ARGV)
    @parsers[CMD_GLOBAL].order!(argv)
    @options.command = argv.shift

    case @options.command
    when CMD_HOURS
      @options.command_args       = OpenStruct.new
      @options.command_args.id    = nil
      @options.command_args.from  = nil
      @options.command_args.until = nil
    when CMD_LOCATE
      @options.command_args       = OpenStruct.new
      @options.command_args.id    = nil
    when CMD_FIRST
      @options.command_args       = OpenStruct.new
      @options.command_args.id    = nil
      @options.command_args.from  = nil
      @options.command_args.until = nil
    when CMD_LAST
      @options.command_args       = OpenStruct.new
      @options.command_args.id    = nil
      @options.command_args.from  = nil
      @options.command_args.until = nil
    when CMD_SAVE
      @options.command_args = nil
    else
    end

    @parsers[command].parse(argv) if command
  rescue => e
    BBBHelper::p_error 'Unexpected error while processing arguments. Aborting…'
    raise e
  end

  def get_options
    @options.to_h
  end
end


begin
  options = BBBOptions.new
  options.parse(ARGV)

  BBBHelper.debug = options.debug
  BBBHelper.p_debug 'Parsed options: ' + options.get_options.to_s

  case options.command
  when BBBOptions::CMD_HOURS
    puts 'Placeholder command: ' + options.command.to_s
    exit 0
    #b = BBBrute.new(options)
    #b.auth
    #b.doors
  when BBBOptions::CMD_LOCATE
    puts 'Placeholder command: ' + options.command.to_s
  when BBBOptions::CMD_FIRST
    puts 'Placeholder command: ' + options.command.to_s
  when BBBOptions::CMD_LAST
    puts 'Placeholder command: ' + options.command.to_s
  when BBBOptions::CMD_SAVE
    options.save_config
  else
    puts 'Unrecognized command: ' + options.command.to_s
    exit 1
  end
rescue => exception
  STDERR.puts "E: #{exception}"
  raise exception
end
