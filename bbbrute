#!/usr/bin/ruby

require 'yaml'
require 'openssl'
require 'net/http'
require 'date'
require 'optparse'
require 'ostruct'
require 'base64'
require 'pp'


class BBBHelper
  SECONDS_IN_8H = 28800

  def self.debug?
    @debug ||= false
  end

  def self.debug=(value)
    @debug = value
  end

  def self.debug_http_get_headers(request)
    return unless debug?

    STDERR.puts 'GET Request:'
    STDERR.puts request.path
    request.each_header {|key,value| STDERR.puts "| #{key} = #{value}"}
  end

  def self.debug_http_response_headers(response)
    return unless debug?

    STDERR.puts 'Response:'
    STDERR.puts response.inspect
    response.header.each_header {|key,value| STDERR.puts "| #{key} = #{value}"}
  end

  def self.http_extract_cookies(response)
    all_cookies = response.get_fields('set-cookie')
    unless all_cookies == nil
      cookies_array = Array.new
      all_cookies.each {|cookie| cookies_array.push(cookie.split('; ')[0])}
      $cookies = cookies_array.join('; ')
    end
  rescue
    raise 'Cookies not extracted for an unknown reason.'
  end

  def self.p_debug(lines)
    if debug?
      lines.split("\n").each do |line|
        STDERR.puts "D,#{line}"
      end
    end
  end

  def self.p_warning(lines)
    lines.split("\n").each do |line|
      STDERR.puts "W,#{line}"
    end
  end

  def self.p_error(lines)
    lines.split("\n").each do |line|
      STDERR.puts "E,#{line}"
    end
  end

  def self.cwb(date = Date.today)
    date - date.wday + 1
  end

  def self.cwe(date = Date.today)
    date - date.wday + 7
  end

  def self.timestr_to_seconds(str)
    timearr = str.split(':').map {|s| s.to_i}
    timearr[0]*3600 + timearr[1]*60 + timearr[2]
  end

  def self.seconds_to_timestr(n)
    n = n.abs

    hours = n / 3600
    r = n % 3600
    minutes = r / 60
    seconds = r % 60

    sprintf("%02d:%02d:%02d", hours, minutes, seconds)
  end

  def self.formatted_printout(format, data)
    puts "#{data[:name]} (#{data[:id]}):"

    case format
    when BBBOptions::CMD_HOURS
      data[:hours].each do |h|
        printf("%1s %10s  %8s  %4.2f  %1s %1s %1s %1s %1s %1s  %s\n",
               h[:holiday] ? 'H' : '',
               h[:date],
               h[:hours],
               h[:rate],
               h[:day_off] ? 'D' : '',
               h[:vacation] ? 'V' : '',
               h[:unpaid_leave] ? 'U' : '',
               h[:sick_leave] ? 'S' : '',
               h[:business_trip] ? 'B' : '',
               h[:no_control] ? 'N' : '',
               h[:comments].join('/'))
      end
    when BBBOptions::CMD_ETA
      printf("Запланировано: %11s\n", seconds_to_timestr(data[:eta][:planned]))
      printf("Отработано:    %11s\n", seconds_to_timestr(data[:eta][:actual]))
      if data[:eta][:remaining] < 0
        printf("Переработано:  %11s\n", seconds_to_timestr(data[:eta][:remaining]))
      else
        printf("Недоработано:  %11s\n", seconds_to_timestr(data[:eta][:remaining]))
      end
    end
  end
end


class BBBrute
  module STAT
    LATENESS  =  0
    ABSENCE   =  1
    TIMES     =  2
    DOORS     =  3
  end

  LOGIN_PAGE = 'misc/login.asp'
  DOORS_PAGE = 'Door/DoorPers.asp'
  USERAGENT  = 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.1'

  def initialize(options)
    @options = options

    uri = URI(@options.server)

    @http = Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == 'https', verify_mode: OpenSSL::SSL::VERIFY_NONE)
  end

  def query(stat, params)
    id = params[:id]
    bdate = params[:bdate]
    edate = params[:edate]
    query = 'Bt=%CF%EE%E8%F1%EA&Period=0'
    query += "&RG=#{stat}"
    query += "&Empl=#{id}" if id
    query += "&bD=#{bdate.day}&bMn=#{bdate.month}&bYr=#{bdate.year}"
    query += "&eD=#{edate.day}&eMn=#{edate.month}&eYr=#{edate.year}"
  end

  def auth
    uri = URI.join(@options.server, LOGIN_PAGE)
    request = Net::HTTP::Get.new(uri.request_uri, {'user-agent' => USERAGENT})
    request.basic_auth(@options.login, @options.password)
    response = @http.request(request)

    BBBHelper::debug_http_get_headers(request)
    BBBHelper::debug_http_response_headers(response)

    raise 'Authorization failed (401)' if response.code == '401'

    $cookies = BBBHelper::http_extract_cookies(response)
  end

  def doors(params = {})
    uri = URI.join(@options.server + '/' + DOORS_PAGE + '?' + query(STAT::TIMES, {:id => @options.command_args.id, :bdate => @options.command_args.from, :edate => @options.command_args.to}))

    request = Net::HTTP::Get.new(uri.request_uri, {'user-agent' => USERAGENT})
    request.basic_auth(@options.login, @options.password)
    request.add_field('cookie', $cookies)
    response = @http.request(request)

    BBBHelper::debug_http_get_headers(request)
    BBBHelper::debug_http_response_headers(response)

    BBBHelper::p_debug "#{@options.command_args.id} #{response.inspect}"

    body = response.body.force_encoding('CP1251').encode('UTF-8')

    # BBBHelper::p_debug 'BODY'
    # BBBHelper::p_debug body
    # BBBHelper::p_debug 'END BODY'

    parsed_data = nil

    if body_dissect = body.match(/<TR><TD ALIGN=Right rowspan=(\d+)>1.<TD rowspan=\d+><a href=\.\.\/misc\/PersInfo\.asp\?ID=(\d+)>(.*?)<\/a><\/td>(.*)<\/tr><TR><TD ALIGN=Left bgcolor = Silver>/)

      parsed_data= {}
      parsed_data[:count] = body_dissect.captures[0].to_i - 1
      BBBHelper.p_debug "#    = " + parsed_data[:count].to_s

      parsed_data[:id] = body_dissect.captures[1].to_i
      BBBHelper.p_debug "Id   = " + parsed_data[:id].to_s

      parsed_data[:name] = body_dissect.captures[2]
      BBBHelper.p_debug "Name = " + parsed_data[:name]

      rawdata = body_dissect.captures[3]
      BBBHelper.p_debug "Data = #{rawdata.length}B"

      parsed_data[:hours] = rawdata.split('<tr>').map do |line|
        hours_data = {
          holiday:        false,
          date:           nil,
          hours:          nil,
          rate:           nil,
          day_off:        nil,
          vacation:       nil,
          unpaid_leave:   nil,
          sick_leave:     nil,
          business_trip:  nil,
          no_control:     nil,
          comments:       []
        }

        if h = line.scan(/<TD.*?>(.*?)<\/TD>/)
          hours_data[:holiday] = true if h[0][0].match(/Red/)
          hours_data[:date]           = h[0][0].gsub(/[^0-9.]+/, '')
          hours_data[:hours]          = h[1][0].gsub(/[^0-9:]+/, '')
          hours_data[:rate]           = h[2][0].sub(',', '.').to_f
          [
            {index: 3, atom: :day_off},
            {index: 4, atom: :vacation},
            {index: 5, atom: :unpaid_leave},
            {index: 6, atom: :sick_leave},
            {index: 7, atom: :business_trip},
            {index: 8, atom: :no_control}
          ].each do |field|
            if h[field[:index]][0] != '&nbsp'
              hours_data[field[:atom]] = true
              if c = h[field[:index]][0].match(/ALT = "(.*?)"/)
                hours_data[:comments] << c.captures[0]
              end
            end
          end
        end

        hours_data
      end
    end

    parsed_data = fill_eta(parsed_data) if params[:fill_eta]
    parsed_data
  end

  def fill_eta(data)
    data[:eta] = data[:hours].map do |h|
      if h[:holiday] or h[:day_off] or h[:vacation] or
        h[:unpaid_leave] or h[:sick_leave] or
        h[:business_trip] or h[:no_control]
        {date: h[:date], planned: 0, actual: 0}
      else
        planned_load = (h[:rate]*BBBHelper::SECONDS_IN_8H).round
        actual = BBBHelper.timestr_to_seconds(h[:hours])

        {
          date: h[:date],
          planned: planned_load,
          actual: actual
        }
      end
    end.reduce do |h1, h2|
      {planned: h1[:planned] + h2[:planned], actual: h1[:actual] + h2[:actual]}
    end

    data[:eta][:remaining] = data[:eta][:planned] - data[:eta][:actual]
    data
  end
end


class BBBOptions
  CONFIG_FILE = File.join(Dir.home, '.bbbrute/config.yml')

  CMD_GLOBAL      = ''
  CMD_HOURS       = 'hours'
  CMD_ETA         = 'eta'
  CMD_LOCATE      = 'locate'
  CMD_FIRST       = 'first'
  CMD_LAST        = 'last'
  CMD_SAVE        = 'save'

  MSG_USAGE                   = 'Usage: %s [OPTION...] COMMAND [ARG...]'
  MSG_DESCRIPTION             = 'BBBrute exists to help you with the analysis of timesheets'
  MSG_COMMAND_PRINTOUT        = '%s (%s)'
  MSG_DESCRIPTION_HOURS       = 'Print hours worked by person during a selected period'
  MSG_DESCRIPTION_ETA         = 'Calculated remaining workload for a selected period'
  MSG_DESCRIPTION_LOCATE      = 'Find out, where is person now, looking by the last entry'
  MSG_DESCRIPTION_FIRST       = 'List all first entries during a selected period'
  MSG_DESCRIPTION_LAST        = 'List all last entries during a selected period'
  MSG_DESCRIPTION_SAVE        = 'Save entered global options for future use'
  MSG_OPTION_HELP             = 'Show help message'
  MSG_OPTION_DEBUG            = 'Print debug information'
  MSG_OPTION_SERVER           = 'Address of the timesheets server (example: https://example.org)'
  MSG_OPTION_LOGIN            = 'Domain login of the user with access to the timesheets server'
  MSG_OPTION_PASSWORD         = 'Password of the user with access to the timesheets server'
  MSG_OPTION_MACHINE          = 'Output data as a JSON for further processing'
  MSG_ARGUMENT_ID             = 'ID of the person to check timesheet for'
  MSG_ARGUMENT_FROM           = 'Beginning of the date range to check (default value: today)'
  MSG_ARGUMENT_TO             = 'End of the date range to check (default value: equals from)'
  MSG_ARGUMENT_WEEK           = 'Calculate full week which includes FROM value'

  def initialize
    @options = OpenStruct.new
    @options.debug            = false
    @options.server           = nil
    @options.login            = nil
    @options.password         = nil
    @options.machine_friendly = false
    @options.command          = nil
    @options.command_args     = nil

    load_config
    setup_parsers
  end

  def method_missing(method, *args, &block)
    @options.send(method, *args, &block)
  end

  def exec_help_printout
    @parsers.each do |parser_name, parser_scheme|
      puts parser_scheme
    end

    exit 0
  end

  def setup_parsers
    @parsers = {
      CMD_GLOBAL => OptionParser.new do |o|
        o.banner = MSG_USAGE % File.basename($0)
        o.separator MSG_DESCRIPTION
        o.separator ''
        o.separator 'OPTIONS'

        o.on('-h', '--help', MSG_OPTION_HELP)\
          { exec_help_printout }

        o.on('-d', '--[no-]debug', MSG_OPTION_DEBUG)\
          {|b| @options.debug = b}

        o.on('-s', '--server HOSTNAME', String, MSG_OPTION_SERVER)\
          {|s| @options.server = s}

        o.on('-l', '--login LOGIN', String, MSG_OPTION_LOGIN)\
          {|s| @options.login = s}

        o.on('-p', '--password PASSWORD', String, MSG_OPTION_PASSWORD)\
          {|s| @options.password = s}

        o.on('-m', '--[no-]machine-friendly', MSG_OPTION_MACHINE)\
          {|b| @options.machine_friendly = b}

        o.separator ''
        o.separator 'COMMANDS'
      end,

      CMD_HOURS => OptionParser.new do |o|
        o.banner = MSG_COMMAND_PRINTOUT % [CMD_HOURS, MSG_DESCRIPTION_HOURS]

        o.on('-i', '--id ID', Integer, MSG_ARGUMENT_ID)\
          {|i| @options.command_args.id = i}

        o.on('-f', '--from DD.MM.YYYY', String, MSG_ARGUMENT_FROM)\
          {|s| @options.command_args.from = Date.parse(s)}

        o.on('-t', '--to DD.MM.YYYY', String, MSG_ARGUMENT_TO)\
          {|s| @options.command_args.to = Date.parse(s)}

        o.on('-w', '--[no-]week', MSG_ARGUMENT_WEEK)\
          {|b| @options.command_args.week = b}

        o.separator ''
      end,

      CMD_ETA => OptionParser.new do |o|
        o.banner = MSG_COMMAND_PRINTOUT % [CMD_ETA, MSG_DESCRIPTION_ETA]

        o.on('-i', '--id ID', Integer, MSG_ARGUMENT_ID)\
          {|i| @options.command_args.id = i}

        o.on('-f', '--from DD.MM.YYYY', String, MSG_ARGUMENT_FROM)\
          {|s| @options.command_args.from = Date.parse(s)}

        o.on('-t', '--to DD.MM.YYYY', String, MSG_ARGUMENT_TO)\
          {|s| @options.command_args.to = Date.parse(s)}

        o.on('-w', '--[no-]week', MSG_ARGUMENT_WEEK)\
          {|b| @options.command_args.week = b}

        o.separator ''
      end,

      CMD_LOCATE => OptionParser.new do |o|
        o.banner = MSG_COMMAND_PRINTOUT % [CMD_LOCATE, MSG_DESCRIPTION_LOCATE]

        o.on('-i', '--id ID', Integer, MSG_ARGUMENT_ID)\
          {|i| @options.command_args.id = i}

        o.separator ''
      end,

      CMD_FIRST => OptionParser.new do |o|
        o.banner = MSG_COMMAND_PRINTOUT % [CMD_FIRST, MSG_DESCRIPTION_FIRST]

        o.on('-i', '--id ID', Integer, MSG_ARGUMENT_ID)\
          {|i| @options.command_args.id = i}

        o.on('-f', '--from DD.MM.YYYY', String, MSG_ARGUMENT_FROM)\
          {|s| @options.command_args.from = Date.parse(s)}

        o.on('-t', '--to DD.MM.YYYY', String, MSG_ARGUMENT_TO)\
          {|s| @options.command_args.to = Date.parse(s)}

        o.separator ''
      end,

      CMD_LAST => OptionParser.new do |o|
        o.banner = MSG_COMMAND_PRINTOUT % [CMD_LAST, MSG_DESCRIPTION_LAST]

        o.on('-i', '--id ID', Integer, MSG_ARGUMENT_ID)\
          {|i| @options.command_args.id = i}

        o.on('-f', '--from DD.MM.YYYY', String, MSG_ARGUMENT_FROM)\
          {|s| @options.command_args.from = Date.parse(s)}

        o.on('-t', '--to DD.MM.YYYY', String, MSG_ARGUMENT_TO)\
          {|s| @options.command_args.to = Date.parse(s)}

        o.separator ''
      end,

      CMD_SAVE => OptionParser.new do |o|
        o.banner = MSG_COMMAND_PRINTOUT % [CMD_SAVE, MSG_DESCRIPTION_SAVE]
        o.separator ''
      end
    }
  end

  def load_config
    File.open(CONFIG_FILE) do |f|
      config = YAML::load(f)

      @options.server   = config[:server]
      @options.login    = config[:login]
      @options.password = Base64.decode64(config[:password])

      BBBHelper.p_debug 'Configuration loaded from the file: ' + CONFIG_FILE
    end
  rescue
    BBBHelper.p_warning 'Unable to load configuration from the file: ' + CONFIG_FILE
  end

  def save_config
    config = {
      :server => @options.server,
      :login => @options.login,
      :password => Base64.encode64(@options.password)
    }

    Dir.mkdir(File.dirname(CONFIG_FILE)) unless Dir.exist?(File.dirname(CONFIG_FILE))
    File.open(CONFIG_FILE, mode = 'w') {|f| f.puts(config.to_yaml)}

    puts 'Configuration written to the file: ' + CONFIG_FILE
  rescue => e
    BBBHelper.p_error "Unable to write configuration to the file(#{CONFIG_FILE})"
    raise e
  end

  def parse(argv = ARGV)
    @parsers[CMD_GLOBAL].order!(argv)
    @options.command = argv.shift

    case @options.command
    when CMD_HOURS, CMD_ETA, CMD_FIRST, CMD_LAST
      @options.command_args       = OpenStruct.new
      @options.command_args.id    = nil
      @options.command_args.from  = nil
      @options.command_args.to    = nil
      @options.command_args.week  = false
      @parsers[@options.command].parse!(argv)
      @options.command_args.from ||= Date.today

      if @options.command_args.week
        @options.command_args.from  = BBBHelper.cwb(@options.command_args.from)
        @options.command_args.to    = BBBHelper.cwe(@options.command_args.from)
      else
        @options.command_args.to ||= @options.command_args.from
      end
    when CMD_LOCATE
      @options.command_args       = OpenStruct.new
      @options.command_args.id    = nil
      @parsers[@options.command].parse!(argv)
    when CMD_SAVE
      @options.command_args = nil
      @parsers[@options.command].parse!(argv)
    end

  rescue => e
    BBBHelper::p_error 'Unexpected error while processing arguments. Aborting…'
    raise e
  end

  def get_options
    @options
  end
end


begin
  options = BBBOptions.new
  options.parse(ARGV)

  BBBHelper.debug = options.debug
  BBBHelper.p_debug 'Parsed options: ' + options.get_options.to_s

  case options.command
  when BBBOptions::CMD_HOURS
    b = BBBrute.new(options)
    b.auth
    data = b.doors
    BBBHelper::formatted_printout(BBBOptions::CMD_HOURS, data)
  when BBBOptions::CMD_ETA
    b = BBBrute.new(options)
    b.auth
    data = b.doors({fill_eta: true})
    BBBHelper::formatted_printout(BBBOptions::CMD_ETA, data)
  when BBBOptions::CMD_LOCATE
    puts 'Placeholder command: ' + options.command.to_s
  when BBBOptions::CMD_FIRST
    puts 'Placeholder command: ' + options.command.to_s
  when BBBOptions::CMD_LAST
    puts 'Placeholder command: ' + options.command.to_s
  when BBBOptions::CMD_SAVE
    options.save_config
  else
    puts 'Unrecognized command: ' + options.command.to_s
    exit 1
  end
rescue => exception
  BBBHelper::p_error exception.to_s
  raise exception
end
